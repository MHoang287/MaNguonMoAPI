<?php
require_once('app/config/database.php');
require_once('app/models/ProductModel.php');
require_once('app/models/CategoryModel.php');

/**
 * Controller API cho qu·∫£n l√Ω s·∫£n ph·∫©m
 * H·ªó tr·ª£ CRUD operations v√† upload h√¨nh ·∫£nh th√¥ng qua API
 */
class ProductApiController
{
    private $productModel;
    private $db;
    
    // Th∆∞ m·ª•c l∆∞u tr·ªØ h√¨nh ·∫£nh upload
    private $uploadDir = 'uploads/products/';
    
    // K√≠ch th∆∞·ªõc file t·ªëi ƒëa (10MB)
    private $maxFileSize = 10 * 1024 * 1024;
    
    // C√°c ƒë·ªãnh d·∫°ng h√¨nh ·∫£nh ƒë∆∞·ª£c ph√©p
    private $allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];

    public function __construct()
    {
        $this->db = (new Database())->getConnection();
        $this->productModel = new ProductModel($this->db);
        
        // ƒê·∫∑t header Content-Type cho API response
        header('Content-Type: application/json');
        
        // T·∫°o th∆∞ m·ª•c upload n·∫øu ch∆∞a t·ªìn t·∫°i
        $this->createUploadDirectory();
        
        // X·ª≠ l√Ω CORS cho frontend JavaScript
        $this->handleCors();
    }

    /**
     * T·∫°o th∆∞ m·ª•c upload n·∫øu ch∆∞a t·ªìn t·∫°i
     */
    private function createUploadDirectory()
    {
        if (!is_dir($this->uploadDir)) {
            if (!mkdir($this->uploadDir, 0755, true)) {
                error_log("‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c upload: " . $this->uploadDir);
            } else {
                error_log("‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c upload: " . $this->uploadDir);
            }
        }
    }

    /**
     * X·ª≠ l√Ω CORS headers ƒë·ªÉ frontend c√≥ th·ªÉ g·ªçi API
     */
    private function handleCors()
    {
        // Cho ph√©p c√°c domain g·ªçi API
        header("Access-Control-Allow-Origin: *");
        header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS");
        header("Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With");
        
        // X·ª≠ l√Ω preflight request
        if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
            http_response_code(200);
            exit();
        }
    }

    /**
     * L·∫•y danh s√°ch s·∫£n ph·∫©m v·ªõi h·ªó tr·ª£ l·ªçc v√† t√¨m ki·∫øm
     * GET /api/product
     */
    public function index()
    {
        try {
            error_log("üì¶ API: L·∫•y danh s√°ch s·∫£n ph·∫©m");
            
            // L·∫•y c√°c tham s·ªë query t·ª´ URL
            $options = $this->getQueryParams();
            
            // G·ªçi model ƒë·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m
            $products = $this->productModel->getProducts($options);
            
            // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh cho t·ª´ng s·∫£n ph·∫©m
            $products = $this->processImagePaths($products);
            
            // Tr·∫£ v·ªÅ d·ªØ li·ªáu JSON
            echo json_encode([
                'success' => true,
                'data' => $products,
                'total' => $this->productModel->getTotalProducts($options),
                'message' => 'L·∫•y danh s√°ch s·∫£n ph·∫©m th√†nh c√¥ng'
            ]);
            
            error_log("‚úÖ API: ƒê√£ tr·∫£ v·ªÅ " . count($products) . " s·∫£n ph·∫©m");
            
        } catch (Exception $e) {
            error_log("‚ùå API Error: " . $e->getMessage());
            $this->sendErrorResponse('C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch s·∫£n ph·∫©m', 500);
        }
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt m·ªôt s·∫£n ph·∫©m
     * GET /api/product/{id}
     */
    public function show($id)
    {
        try {
            error_log("üîç API: L·∫•y s·∫£n ph·∫©m ID: " . $id);
            
            // Validate ID
            if (!is_numeric($id) || $id <= 0) {
                $this->sendErrorResponse('ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá', 400);
                return;
            }
            
            // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ database
            $product = $this->productModel->getProductById($id);

            if ($product) {
                // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh
                $product = $this->processImagePath($product);
                
                echo json_encode([
                    'success' => true,
                    'data' => $product,
                    'message' => 'L·∫•y th√¥ng tin s·∫£n ph·∫©m th√†nh c√¥ng'
                ]);
                
                error_log("‚úÖ API: ƒê√£ tr·∫£ v·ªÅ s·∫£n ph·∫©m: " . $product->name);
            } else {
                error_log("‚ùå API: Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ID: " . $id);
                $this->sendErrorResponse('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m', 404);
            }
        } catch (Exception $e) {
            error_log("‚ùå API Error: " . $e->getMessage());
            $this->sendErrorResponse('C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin s·∫£n ph·∫©m', 500);
        }
    }

    /**
     * Th√™m s·∫£n ph·∫©m m·ªõi v·ªõi h·ªó tr·ª£ upload h√¨nh ·∫£nh
     * POST /api/product
     */
    public function store()
    {
        try {
            error_log("‚ûï API: T·∫°o s·∫£n ph·∫©m m·ªõi");
            
            // L·∫•y d·ªØ li·ªáu t·ª´ request
            $data = $this->getRequestData();
            
            // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
            $validationResult = $this->validateProductData($data);
            if ($validationResult !== true) {
                $this->sendErrorResponse('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá', 400, $validationResult);
                return;
            }
            
            // X·ª≠ l√Ω upload h√¨nh ·∫£nh n·∫øu c√≥
            $imagePath = null;
            if (!empty($_FILES['image']) && $_FILES['image']['error'] === UPLOAD_ERR_OK) {
                error_log("üì∏ API: C√≥ file h√¨nh ·∫£nh ƒë∆∞·ª£c upload");
                $uploadResult = $this->handleImageUpload($_FILES['image']);
                
                if ($uploadResult['success']) {
                    $imagePath = $uploadResult['path'];
                    error_log("‚úÖ Upload th√†nh c√¥ng: " . $imagePath);
                } else {
                    error_log("‚ùå Upload th·∫•t b·∫°i: " . $uploadResult['error']);
                    $this->sendErrorResponse($uploadResult['error'], 400);
                    return;
                }
            }
            
            // Th√™m s·∫£n ph·∫©m v√†o database
            $result = $this->productModel->addProduct(
                $data['name'],
                $data['description'],
                $data['price'],
                $data['category_id'],
                $imagePath
            );

            if (is_array($result)) {
                // C√≥ l·ªói validation t·ª´ model
                error_log("‚ùå API: Validation errors t·ª´ model");
                $this->sendErrorResponse('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá', 400, $result);
            } else {
                // Th√†nh c√¥ng
                error_log("‚úÖ API: T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng");
                http_response_code(201);
                echo json_encode([
                    'success' => true,
                    'message' => 'T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng',
                    'product_id' => $result,
                    'image_path' => $imagePath
                ]);
            }
        } catch (Exception $e) {
            error_log("‚ùå API Error: " . $e->getMessage());
            $this->sendErrorResponse('C√≥ l·ªói x·∫£y ra khi t·∫°o s·∫£n ph·∫©m', 500);
        }
    }

    /**
     * X·ª≠ l√Ω route ƒë·ªông cho update b·∫±ng POST + _method=PUT
     * Ph·∫£i ƒë∆∞·ª£c g·ªçi t·ª´ router ch√≠nh
     */
    public static function handleApiRoutes()
    {
        $uri = $_SERVER['REQUEST_URI'];
        $method = $_SERVER['REQUEST_METHOD'];
        
        // X·ª≠ l√Ω route /api/product/{id}
        if (preg_match('#^/api/product/(\d+)$#', $uri, $matches)) {
            $id = (int)$matches[1];
            $controller = new self();
            
            error_log("üåê API Route: $method $uri");
            
            switch ($method) {
                case 'GET':
                    $controller->show($id);
                    break;
                    
                case 'POST':
                    // Ki·ªÉm tra _method=PUT ƒë·ªÉ x·ª≠ l√Ω nh∆∞ update
                    if (isset($_POST['_method']) && strtoupper($_POST['_method']) === 'PUT') {
                        error_log("üìù X·ª≠ l√Ω POST v·ªõi _method=PUT nh∆∞ UPDATE");
                        $controller->update($id);
                    } else {
                        error_log("‚ùå POST kh√¥ng c√≥ _method=PUT");
                        http_response_code(405);
                        echo json_encode(['success' => false, 'message' => 'Method Not Allowed']);
                    }
                    break;
                    
                case 'PUT':
                    $controller->update($id);
                    break;
                    
                case 'DELETE':
                    $controller->destroy($id);
                    break;
                    
                default:
                    http_response_code(405);
                    echo json_encode(['success' => false, 'message' => 'Method Not Allowed']);
            }
            exit;
        }
        
        // X·ª≠ l√Ω route /api/product/upload-image
        if ($uri === '/api/product/upload-image' && $method === 'POST') {
            (new self())->uploadImage();
            exit;
        }
        
        // X·ª≠ l√Ω route /api/product (list)
        if ($uri === '/api/product' && $method === 'GET') {
            (new self())->index();
            exit;
        }
    }

    /**
     * C·∫≠p nh·∫≠t s·∫£n ph·∫©m v·ªõi h·ªó tr·ª£ thay ƒë·ªïi h√¨nh ·∫£nh
     * PUT /api/product/{id} ho·∫∑c POST + _method=PUT
     */
    public function update($id)
    {
        try {
            error_log("üìù API: C·∫≠p nh·∫≠t s·∫£n ph·∫©m ID: " . $id);
            
            if (!is_numeric($id) || $id <= 0) {
                $this->sendErrorResponse('ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá', 400);
                return;
            }
            
            $existingProduct = $this->productModel->getProductById($id);
            if (!$existingProduct) {
                error_log("‚ùå API: S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ID: " . $id);
                $this->sendErrorResponse('S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i', 404);
                return;
            }
            
            // L·∫•y d·ªØ li·ªáu t·ª´ $_POST (form-data) ho·∫∑c JSON body
            $data = $this->getRequestData();
            
            error_log("üìä D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c: " . json_encode($data));
            error_log("üìÅ Files nh·∫≠n ƒë∆∞·ª£c: " . json_encode($_FILES));
            
            // Validate d·ªØ li·ªáu
            $validationResult = $this->validateProductData($data);
            if ($validationResult !== true) {
                error_log("‚ùå Validation failed: " . json_encode($validationResult));
                $this->sendErrorResponse('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá', 400, $validationResult);
                return;
            }
            
            // X·ª≠ l√Ω h√¨nh ·∫£nh
            $imagePath = $existingProduct->image; // Gi·ªØ h√¨nh ·∫£nh c≈© m·∫∑c ƒë·ªãnh
            
            if (!empty($_FILES['image']) && $_FILES['image']['error'] === UPLOAD_ERR_OK) {
                error_log("üì∏ API: C√≥ h√¨nh ·∫£nh m·ªõi ƒë∆∞·ª£c upload");
                
                $uploadResult = $this->handleImageUpload($_FILES['image']);
                
                if ($uploadResult['success']) {
                    // X√≥a h√¨nh ·∫£nh c≈© n·∫øu c√≥
                    if (!empty($existingProduct->image)) {
                        $this->deleteOldImage($existingProduct->image);
                    }
                    
                    $imagePath = $uploadResult['path'];
                    error_log("‚úÖ C·∫≠p nh·∫≠t h√¨nh ·∫£nh th√†nh c√¥ng: " . $imagePath);
                } else {
                    error_log("‚ùå Upload h√¨nh ·∫£nh th·∫•t b·∫°i: " . $uploadResult['error']);
                    $this->sendErrorResponse($uploadResult['error'], 400);
                    return;
                }
            }
            
            // C·∫≠p nh·∫≠t s·∫£n ph·∫©m trong database
            $result = $this->productModel->updateProduct(
                $id,
                $data['name'],
                $data['description'],
                $data['price'],
                $data['category_id'],
                $imagePath
            );

            if ($result) {
                error_log("‚úÖ API: C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng");
                echo json_encode([
                    'success' => true,
                    'message' => 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng',
                    'image_path' => $imagePath
                ]);
            } else {
                error_log("‚ùå API: C·∫≠p nh·∫≠t s·∫£n ph·∫©m th·∫•t b·∫°i");
                $this->sendErrorResponse('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th·∫•t b·∫°i', 400);
            }
        } catch (Exception $e) {
            error_log("‚ùå API Error: " . $e->getMessage());
            $this->sendErrorResponse('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m', 500);
        }
    }

    /**
     * X√≥a s·∫£n ph·∫©m v√† h√¨nh ·∫£nh li√™n quan
     * DELETE /api/product/{id}
     */
    public function destroy($id)
    {
        try {
            error_log("üóëÔ∏è API: X√≥a s·∫£n ph·∫©m ID: " . $id);
            
            // Validate ID
            if (!is_numeric($id) || $id <= 0) {
                $this->sendErrorResponse('ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá', 400);
                return;
            }
            
            // L·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ c√≥ ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh
            $product = $this->productModel->getProductById($id);
            if (!$product) {
                error_log("‚ùå API: S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ID: " . $id);
                $this->sendErrorResponse('S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i', 404);
                return;
            }
            
            // X√≥a s·∫£n ph·∫©m kh·ªèi database
            $result = $this->productModel->deleteProduct($id);

            if ($result) {
                // X√≥a h√¨nh ·∫£nh li√™n quan n·∫øu c√≥
                if (!empty($product->image)) {
                    $this->deleteOldImage($product->image);
                }
                
                error_log("‚úÖ API: X√≥a s·∫£n ph·∫©m th√†nh c√¥ng");
                echo json_encode([
                    'success' => true,
                    'message' => 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng'
                ]);
            } else {
                error_log("‚ùå API: X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i");
                $this->sendErrorResponse('X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i', 400);
            }
        } catch (Exception $e) {
            error_log("‚ùå API Error: " . $e->getMessage());
            $this->sendErrorResponse('C√≥ l·ªói x·∫£y ra khi x√≥a s·∫£n ph·∫©m', 500);
        }
    }

    /**
     * Upload h√¨nh ·∫£nh ri√™ng bi·ªát (endpoint b·ªï sung)
     * POST /api/product/upload-image
     */
    public function uploadImage()
    {
        try {
            error_log("üì∏ API: Upload h√¨nh ·∫£nh ƒë·ªôc l·∫≠p");
            
            if (empty($_FILES['image']) || $_FILES['image']['error'] !== UPLOAD_ERR_OK) {
                $this->sendErrorResponse('Kh√¥ng c√≥ file h√¨nh ·∫£nh h·ª£p l·ªá', 400);
                return;
            }
            
            $uploadResult = $this->handleImageUpload($_FILES['image']);
            
            if ($uploadResult['success']) {
                error_log("‚úÖ API: Upload h√¨nh ·∫£nh th√†nh c√¥ng");
                echo json_encode([
                    'success' => true,
                    'message' => 'Upload h√¨nh ·∫£nh th√†nh c√¥ng',
                    'image_path' => $uploadResult['path'],
                    'image_url' => $uploadResult['url']
                ]);
            } else {
                error_log("‚ùå API: Upload h√¨nh ·∫£nh th·∫•t b·∫°i");
                $this->sendErrorResponse($uploadResult['error'], 400);
            }
        } catch (Exception $e) {
            error_log("‚ùå API Error: " . $e->getMessage());
            $this->sendErrorResponse('C√≥ l·ªói x·∫£y ra khi upload h√¨nh ·∫£nh', 500);
        }
    }

    /**
     * X√≥a h√¨nh ·∫£nh
     * DELETE /api/product/delete-image
     */
    public function deleteImage()
    {
        try {
            error_log("üóëÔ∏è API: X√≥a h√¨nh ·∫£nh");
            
            $data = json_decode(file_get_contents("php://input"), true);
            $imagePath = $data['image_path'] ?? '';
            
            if (empty($imagePath)) {
                $this->sendErrorResponse('ƒê∆∞·ªùng d·∫´n h√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá', 400);
                return;
            }
            
            if ($this->deleteOldImage($imagePath)) {
                error_log("‚úÖ API: X√≥a h√¨nh ·∫£nh th√†nh c√¥ng");
                echo json_encode([
                    'success' => true,
                    'message' => 'X√≥a h√¨nh ·∫£nh th√†nh c√¥ng'
                ]);
            } else {
                error_log("‚ùå API: X√≥a h√¨nh ·∫£nh th·∫•t b·∫°i");
                $this->sendErrorResponse('X√≥a h√¨nh ·∫£nh th·∫•t b·∫°i', 400);
            }
        } catch (Exception $e) {
            error_log("‚ùå API Error: " . $e->getMessage());
            $this->sendErrorResponse('C√≥ l·ªói x·∫£y ra khi x√≥a h√¨nh ·∫£nh', 500);
        }
    }

    /**
     * X·ª≠ l√Ω upload h√¨nh ·∫£nh v·ªõi validation ƒë·∫ßy ƒë·ªß
     */
    private function handleImageUpload($file)
    {
        error_log("üì∏ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω upload h√¨nh ·∫£nh");
        
        try {
            // Ki·ªÉm tra l·ªói upload
            if ($file['error'] !== UPLOAD_ERR_OK) {
                return [
                    'success' => false,
                    'error' => $this->getUploadErrorMessage($file['error'])
                ];
            }
            
            // Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            if ($file['size'] > $this->maxFileSize) {
                error_log("‚ùå File qu√° l·ªõn: " . $file['size'] . " bytes");
                return [
                    'success' => false,
                    'error' => 'K√≠ch th∆∞·ªõc file qu√° l·ªõn. T·ªëi ƒëa ' . ($this->maxFileSize / 1024 / 1024) . 'MB'
                ];
            }
            
            // Ki·ªÉm tra lo·∫°i file b·∫±ng mime type
            $mimeType = mime_content_type($file['tmp_name']);
            if (!in_array($mimeType, $this->allowedTypes)) {
                error_log("‚ùå Lo·∫°i file kh√¥ng ƒë∆∞·ª£c ph√©p: " . $mimeType);
                return [
                    'success' => false,
                    'error' => 'Lo·∫°i file kh√¥ng ƒë∆∞·ª£c ph√©p. Ch·ªâ ch·∫•p nh·∫≠n: ' . implode(', ', $this->allowedTypes)
                ];
            }
            
            // Ki·ªÉm tra file c√≥ ph·∫£i l√† h√¨nh ·∫£nh th·∫≠t kh√¥ng
            $imageInfo = getimagesize($file['tmp_name']);
            if ($imageInfo === false) {
                error_log("‚ùå File kh√¥ng ph·∫£i l√† h√¨nh ·∫£nh h·ª£p l·ªá");
                return [
                    'success' => false,
                    'error' => 'File kh√¥ng ph·∫£i l√† h√¨nh ·∫£nh h·ª£p l·ªá'
                ];
            }
            
            // T·∫°o t√™n file unique ƒë·ªÉ tr√°nh trung l·∫∑p
            $extension = $this->getFileExtension($mimeType);
            $fileName = $this->generateUniqueFileName($extension);
            $fullPath = $this->uploadDir . $fileName;
            
            error_log("üìÅ ƒê∆∞·ªùng d·∫´n file: " . $fullPath);
            
            // Di chuy·ªÉn file t·ª´ temp ƒë·∫øn th∆∞ m·ª•c upload
            if (move_uploaded_file($file['tmp_name'], $fullPath)) {
                error_log("‚úÖ Upload file th√†nh c√¥ng");
                
                // T·∫°o thumbnail (t√πy ch·ªçn)
                $this->createThumbnail($fullPath, $imageInfo);
                
                return [
                    'success' => true,
                    'path' => $fileName, // Ch·ªâ l∆∞u t√™n file v√†o DB
                    'url' => '/' . $fullPath, // URL ƒë·∫ßy ƒë·ªß ƒë·ªÉ hi·ªÉn th·ªã
                    'size' => $file['size'],
                    'dimensions' => $imageInfo[0] . 'x' . $imageInfo[1]
                ];
            } else {
                error_log("‚ùå Kh√¥ng th·ªÉ di chuy·ªÉn file upload");
                return [
                    'success' => false,
                    'error' => 'Kh√¥ng th·ªÉ l∆∞u file. Vui l√≤ng th·ª≠ l·∫°i'
                ];
            }
        } catch (Exception $e) {
            error_log("‚ùå L·ªói upload: " . $e->getMessage());
            return [
                'success' => false,
                'error' => 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh upload: ' . $e->getMessage()
            ];
        }
    }

    /**
     * T·∫°o thumbnail cho h√¨nh ·∫£nh (t√πy ch·ªçn)
     */
    private function createThumbnail($imagePath, $imageInfo)
    {
        try {
            error_log("üñºÔ∏è T·∫°o thumbnail cho: " . $imagePath);
            
            $thumbnailDir = $this->uploadDir . 'thumbnails/';
            if (!is_dir($thumbnailDir)) {
                mkdir($thumbnailDir, 0755, true);
            }
            
            $thumbnailPath = $thumbnailDir . 'thumb_' . basename($imagePath);
            $thumbnailWidth = 300; // Chi·ªÅu r·ªông thumbnail
            $thumbnailHeight = 300; // Chi·ªÅu cao thumbnail
            
            // T·∫°o thumbnail d·ª±a tr√™n lo·∫°i h√¨nh ·∫£nh
            switch ($imageInfo[2]) {
                case IMAGETYPE_JPEG:
                    $source = imagecreatefromjpeg($imagePath);
                    break;
                case IMAGETYPE_PNG:
                    $source = imagecreatefrompng($imagePath);
                    break;
                case IMAGETYPE_GIF:
                    $source = imagecreatefromgif($imagePath);
                    break;
                default:
                    error_log("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o thumbnail cho lo·∫°i file n√†y");
                    return false;
            }
            
            if ($source) {
                // T√≠nh to√°n k√≠ch th∆∞·ªõc thumbnail gi·ªØ t·ª∑ l·ªá
                $originalWidth = $imageInfo[0];
                $originalHeight = $imageInfo[1];
                
                $ratio = min($thumbnailWidth / $originalWidth, $thumbnailHeight / $originalHeight);
                $newWidth = $originalWidth * $ratio;
                $newHeight = $originalHeight * $ratio;
                
                // T·∫°o thumbnail
                $thumbnail = imagecreatetruecolor($newWidth, $newHeight);
                imagecopyresampled($thumbnail, $source, 0, 0, 0, 0, $newWidth, $newHeight, $originalWidth, $originalHeight);
                
                // L∆∞u thumbnail
                imagejpeg($thumbnail, $thumbnailPath, 85);
                
                // Gi·∫£i ph√≥ng b·ªô nh·ªõ
                imagedestroy($source);
                imagedestroy($thumbnail);
                
                error_log("‚úÖ T·∫°o thumbnail th√†nh c√¥ng: " . $thumbnailPath);
                return true;
            }
        } catch (Exception $e) {
            error_log("‚ùå L·ªói t·∫°o thumbnail: " . $e->getMessage());
        }
        
        return false;
    }

    /**
     * X√≥a h√¨nh ·∫£nh c≈© khi c·∫≠p nh·∫≠t ho·∫∑c x√≥a s·∫£n ph·∫©m
     */
    private function deleteOldImage($imagePath)
    {
        if (empty($imagePath)) {
            return true;
        }
        
        try {
            error_log("üóëÔ∏è X√≥a h√¨nh ·∫£nh c≈©: " . $imagePath);
            
            // X√≥a file ch√≠nh
            $fullPath = $this->uploadDir . $imagePath;
            if (file_exists($fullPath)) {
                if (unlink($fullPath)) {
                    error_log("‚úÖ ƒê√£ x√≥a file ch√≠nh: " . $fullPath);
                } else {
                    error_log("‚ùå Kh√¥ng th·ªÉ x√≥a file ch√≠nh: " . $fullPath);
                }
            }
            
            // X√≥a thumbnail n·∫øu c√≥
            $thumbnailPath = $this->uploadDir . 'thumbnails/thumb_' . $imagePath;
            if (file_exists($thumbnailPath)) {
                if (unlink($thumbnailPath)) {
                    error_log("‚úÖ ƒê√£ x√≥a thumbnail: " . $thumbnailPath);
                } else {
                    error_log("‚ùå Kh√¥ng th·ªÉ x√≥a thumbnail: " . $thumbnailPath);
                }
            }
            
            return true;
        } catch (Exception $e) {
            error_log("‚ùå L·ªói khi x√≥a h√¨nh ·∫£nh: " . $e->getMessage());
            return false;
        }
    }

    /**
     * T·∫°o t√™n file unique d·ª±a tr√™n timestamp v√† random string
     */
    private function generateUniqueFileName($extension)
    {
        $timestamp = time();
        $randomString = bin2hex(random_bytes(8));
        return $timestamp . '_' . $randomString . '.' . $extension;
    }

    /**
     * L·∫•y extension file t·ª´ mime type
     */
    private function getFileExtension($mimeType)
    {
        $extensions = [
            'image/jpeg' => 'jpg',
            'image/jpg' => 'jpg',
            'image/png' => 'png',
            'image/gif' => 'gif',
            'image/webp' => 'webp'
        ];
        
        return $extensions[$mimeType] ?? 'jpg';
    }

    /**
     * L·∫•y th√¥ng b√°o l·ªói upload
     */
    private function getUploadErrorMessage($errorCode)
    {
        $errors = [
            UPLOAD_ERR_INI_SIZE => 'File qu√° l·ªõn (v∆∞·ª£t qu√° gi·ªõi h·∫°n c·ªßa server)',
            UPLOAD_ERR_FORM_SIZE => 'File qu√° l·ªõn (v∆∞·ª£t qu√° gi·ªõi h·∫°n c·ªßa form)',
            UPLOAD_ERR_PARTIAL => 'File ch·ªâ ƒë∆∞·ª£c upload m·ªôt ph·∫ßn',
            UPLOAD_ERR_NO_FILE => 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c upload',
            UPLOAD_ERR_NO_TMP_DIR => 'Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c t·∫°m',
            UPLOAD_ERR_CANT_WRITE => 'Kh√¥ng th·ªÉ ghi file v√†o disk',
            UPLOAD_ERR_EXTENSION => 'Upload b·ªã ch·∫∑n b·ªüi extension'
        ];
        
        return $errors[$errorCode] ?? 'L·ªói upload kh√¥ng x√°c ƒë·ªãnh';
    }

    /**
     * X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh cho danh s√°ch s·∫£n ph·∫©m
     */
    private function processImagePaths($products)
    {
        foreach ($products as $product) {
            $product = $this->processImagePath($product);
        }
        return $products;
    }

    /**
     * X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh cho m·ªôt s·∫£n ph·∫©m
     */
    private function processImagePath($product)
    {
        if (!empty($product->image)) {
            // T·∫°o URL ƒë·∫ßy ƒë·ªß cho h√¨nh ·∫£nh
            $product->image_url = '/' . $this->uploadDir . $product->image;
            
            // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
            $fullPath = $this->uploadDir . $product->image;
            $product->image_exists = file_exists($fullPath);
            
            // Th√™m URL thumbnail n·∫øu c√≥
            $thumbnailPath = $this->uploadDir . 'thumbnails/thumb_' . $product->image;
            if (file_exists($thumbnailPath)) {
                $product->thumbnail_url = '/' . $thumbnailPath;
            }
        } else {
            $product->image_url = null;
            $product->image_exists = false;
            $product->thumbnail_url = null;
        }
        
        return $product;
    }

    /**
     * L·∫•y d·ªØ li·ªáu t·ª´ request (JSON ho·∫∑c form-data)
     */
    private function getRequestData()
    {
        // N·∫øu c√≥ file upload, d·ªØ li·ªáu s·∫Ω ·ªü $_POST
        if (!empty($_FILES)) {
            return [
                'name' => $_POST['name'] ?? '',
                'description' => $_POST['description'] ?? '',
                'price' => $_POST['price'] ?? '',
                'category_id' => $_POST['category_id'] ?? null
            ];
        }
        
        // N·∫øu kh√¥ng c√≥ file, d·ªØ li·ªáu ·ªü JSON body
        $input = file_get_contents("php://input");
        return json_decode($input, true) ?? [];
    }

    /**
     * L·∫•y c√°c tham s·ªë query t·ª´ URL
     */
    private function getQueryParams()
    {
        return [
            'search' => $_GET['search'] ?? '',
            'category_id' => $_GET['category_id'] ?? '',
            'min_price' => $_GET['min_price'] ?? '',
            'max_price' => $_GET['max_price'] ?? '',
            'sort' => $_GET['sort'] ?? 'newest',
            'limit' => $_GET['limit'] ?? 20,
            'offset' => $_GET['offset'] ?? 0
        ];
    }

    /**
     * Validate d·ªØ li·ªáu s·∫£n ph·∫©m
     */
    private function validateProductData($data)
    {
        $errors = [];
        
        // Validate t√™n s·∫£n ph·∫©m
        if (empty($data['name']) || trim($data['name']) === '') {
            $errors['name'] = 'T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        } elseif (mb_strlen(trim($data['name'])) < 3) {
            $errors['name'] = 'T√™n s·∫£n ph·∫©m ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±';
        } elseif (mb_strlen($data['name']) > 255) {
            $errors['name'] = 'T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±';
        }
        
        // Validate m√¥ t·∫£
        if (empty($data['description']) || trim($data['description']) === '') {
            $errors['description'] = 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        } else {
            // Lo·∫°i b·ªè d·∫•u c√°ch, d·∫•u ch·∫•m, ph·∫©y, k√Ω t·ª± ƒë·∫∑c bi·ªát ƒë·ªÉ ki·ªÉm tra ƒë·ªô d√†i th·ª±c s·ª±
            $descContent = preg_replace('/[\s\.\,\!\?\-\_\(\)\[\]\{\}\:\;\'\"\`\/\\\\]/u', '', $data['description']);
            if (mb_strlen($descContent) < 10) {
                $errors['description'] = 'M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª± th·ª±c s·ª± (kh√¥ng t√≠nh k√Ω t·ª± ƒë·∫∑c bi·ªát/d·∫•u c√°ch)';
            }
        }
        
        // Validate gi√°
        if (empty($data['price'])) {
            $errors['price'] = 'Gi√° s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        } elseif (!is_numeric($data['price'])) {
            $errors['price'] = 'Gi√° s·∫£n ph·∫©m ph·∫£i l√† s·ªë';
        } elseif ($data['price'] < 0) {
            $errors['price'] = 'Gi√° s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c √¢m';
        } elseif ($data['price'] > 999999999) {
            $errors['price'] = 'Gi√° s·∫£n ph·∫©m qu√° l·ªõn';
        }
        
        // Validate category_id (t√πy ch·ªçn)
        if (!empty($data['category_id']) && !is_numeric($data['category_id'])) {
            $errors['category_id'] = 'ID danh m·ª•c kh√¥ng h·ª£p l·ªá';
        }
        
        return empty($errors) ? true : $errors;
    }

    /**
     * G·ª≠i response l·ªói v·ªõi format chu·∫©n
     */
    private function sendErrorResponse($message, $statusCode = 400, $errors = [])
    {
        http_response_code($statusCode);
        echo json_encode([
            'success' => false,
            'message' => $message,
            'errors' => $errors,
            'status_code' => $statusCode
        ]);
    }
}
?>